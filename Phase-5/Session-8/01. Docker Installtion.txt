1.prepare ubuntu docker instance and add http and custom tcp protocol for prot 8080,download the .pem key and save it in some folder 

2. goto>aws>instance>connect>ssh>copy the link

3. open moba x-term > change your .pem file's directory using 
cd d:
cd phase-5

4. pase the copied item to the mobax-term and hit enter


----------------------------------------------------------------------------
Docker Installation on Ubuntu OS
----------------------------------------------------------------------------
link: https://docs.docker.com/engine/install/ubuntu/

> sudo apt-get update
> sudo apt-get install ca-certificates curl gnupg lsb-release
> curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
>echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

> sudo apt-get update

> sudo apt-get install docker-ce docker-ce-cli containerd.io


------------------to verify docker installation
>sudo docker -v

> sudo docker --version 

> sudo docker info

-----------------to list docker container-----------------

>sudo docker container ls

		or
> sudo docker ps -a



-----------------to list docker images---------------------

> sudo docker images

----------------list container volume----------------------

> sudo docker volume ls

-------------------Register in docker hub and prepare an account: https://hub.docker.com


-----to pull docker images from docker----------

> sudo docker pull ubuntu
> sudo docker pull mysql


------------to check the list of images--------------

> sudo docker images

------lets copy the image from git hub and upload in docker----------------


link:  https://github.com/Nikunj-Java/docker_master.git


> git clone https://github.com/Nikunj-Java/docker_master.git
> sudo ls
> cd docker_master


--------------to build the image------------------
> sudo docker build -t demophpimage .  ////demophpimage is my name you can give any name


------------to verify the image uploaded or not check using
> sudo docker images


---------to run image on docker container------------------------

eg: > sudo docker run -d --name <Container name> -p 80:80 <imagename>

>sudo docker run -d --name MyContainer -p 80:80 demophpimage

--------to check the container is running or not------------------------

> sudo docker ps -a


------------to check html code------------------------
> curl localhost:80


----------------goto > AWS> Instance> copy ipv4 address:port
eg: 34.232.51.63:80
